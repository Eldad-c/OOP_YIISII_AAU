package Models;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

public class Executive extends Person {
    private List<Manager> organizationManagersList;
    private List<Project> organizationProjectsList;
    private List<Employee> organizationEmployeesList;

    public Executive(List<Manager> organizationManagersList, List<Project> organizationProjectsList,
                     List<Employee> organizationEmployeesList, String name, String ID, String email, String password) {
        super(name, ID, email, password);
        this.organizationManagersList = organizationManagersList != null ? organizationManagersList : new ArrayList<>();
        this.organizationProjectsList = organizationProjectsList != null ? organizationProjectsList : new ArrayList<>();
        this.organizationEmployeesList = organizationEmployeesList != null ? organizationEmployeesList : new ArrayList<>();
    }

    public List<Manager> getOrganizationManagersList() {
        return organizationManagersList;
    }

    public List<Project> getOrganizationProjectsList() {
        return organizationProjectsList;
    }

    public List<Employee> getOrganizationEmployeesList() {
        return organizationEmployeesList;
    }

    @Override
    public String getInfo() {
        return "Executive Name: " + getName() +
               ", ID: " + getID() +
               ", Email: " + getEmail() +
               ", Managed Organization Overview: " + organizationManagersList.size() + " managers, " +
               organizationProjectsList.size() + " projects, " +
               organizationEmployeesList.size() + " employees.";
    }

    public List<Manager> getAllManagers() {
        return new ArrayList<>(organizationManagersList);
    }

    public List<Project> getAllProjects() {
        return new ArrayList<>(organizationProjectsList);
    }

    public List<Employee> getAllEmployees() {
        return new ArrayList<>(organizationEmployeesList);
    }

    public Report generateReport(String reportType) {
        StringBuilder reportContent = new StringBuilder();
        reportContent.append("--- ").append(reportType).append(" Report ---\n");
        reportContent.append("Generated by Executive: ").append(getName()).append(" (ID: ").append(getID()).append(")\n");
        reportContent.append("Date: ").append(new Date()).append("\n\n");

        switch (reportType) {
            case "PROJECT_PROGRESS":
                reportContent.append("PROJECT PROGRESS OVERVIEW:\n");
                if (organizationProjectsList.isEmpty()) {
                    reportContent.append("No projects available.\n");
                } else {
                    for (Project project : organizationProjectsList) {
                        reportContent.append("- Project: ").append(project.getName())
                                     .append(" (ID: ").append(project.getID())
                                     .append(") Status: ").append(project.getStatus()).append("\n");
                    }
                }
                break;
            case "EMPLOYEE_WORKLOAD":
                reportContent.append("EMPLOYEE WORKLOAD OVERVIEW:\n");
                 if (organizationEmployeesList.isEmpty()) {
                    reportContent.append("No employees available.\n");
                } else {
                    for (Employee employee : organizationEmployeesList) {
                        reportContent.append("- Employee: ").append(employee.getName())
                                     .append(" (ID: ").append(employee.getID());
                                
                    }
                }
                break;
            default:
                reportContent.append("Unknown report type: ").append(reportType).append("\n");
                break;
        }

        return new Report("Report_" + System.currentTimeMillis(), new Date(), reportContent.toString(), this.getID());
    }

    public void viewSystemOverview() {
        System.out.println("\n--- Organization System Overview ---");
        System.out.println("Total Employees: " + organizationEmployeesList.size());
        System.out.println("Total Managers: " + organizationManagersList.size());
        System.out.println("Total Projects: " + organizationProjectsList.size());

        long completedProjects = organizationProjectsList.stream()
                                    .filter(p -> "COMPLETED".equals(p.getStatus()))
                                    .count();
        System.out.println("Projects Completed: " + completedProjects);
        System.out.println("----------------------------------");
    }

    public void deleteAccount(String userId, List<Person> allPersons) {
        boolean foundAndRemoved = false;
        for (int i = 0; i < allPersons.size(); i++) {
            if (allPersons.get(i).getID().equals(userId)) {
                allPersons.remove(i);
                foundAndRemoved = true;
                break;
            }
        }

        if (foundAndRemoved) {
            organizationManagersList.removeIf(m -> m.getID().equals(userId));
            organizationEmployeesList.removeIf(e -> e.getID().equals(userId));
            System.out.println("Account with ID " + userId + " successfully deleted.");
        } else {
            System.out.println("Failed to delete account with ID " + userId + ". User not found.");
        }
    }

    public void addProjectToOrganization(Project newProject) {
        if (!organizationProjectsList.contains(newProject)) {
            organizationProjectsList.add(newProject);
            System.out.println("Project '" + newProject.getName() + "' (ID: " + newProject.getID() + ") added to organization.");
        } else {
            System.out.println("Project '" + newProject.getName() + "' (ID: " + newProject.getID() + ") already exists in organization.");
        }
    }

    public void removeProjectFromOrganization(String projectId) {
        boolean removed = organizationProjectsList.removeIf(p -> p.getID().equals(projectId));
        if (removed) {
            System.out.println("Project with ID " + projectId + " successfully removed from organization.");
        } else {
            System.out.println("Failed to remove project with ID " + projectId + ". Project not found.");
        }
    }
      
    
}
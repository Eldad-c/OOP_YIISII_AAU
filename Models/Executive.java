package Models;

import Database.ManagerDatabase;
import Database.ProjectDatabase;
import Database.EmployeeDatabase;
import Database.PersonDatabase;
import java.util.ArrayList;

public class Executive extends Person {
    private ArrayList<String> organizationManagersList;
    private ArrayList<String> organizationProjectsList;
    private ArrayList<String> organizationEmployeesList;

    public Executive(String name, String ID, String email, String password) {
        super(name, ID, email, password);
        this.organizationManagersList = new ArrayList<>();
        this.organizationProjectsList = new ArrayList<>();
        this.organizationEmployeesList = new ArrayList<>();
    }

    public ArrayList<String> getOrganizationManagersList() {
        return organizationManagersList;
    }
    public ArrayList<String> getOrganizationProjectsList() {
        return organizationProjectsList;
    }
    public ArrayList<String> getOrganizationEmployeesList() {
        return organizationEmployeesList;
    }
    @Override
    public String getInfo() {
        return "Executive Name: " + getName() + ", ID: " + getID() + ", Email: " + getEmail() +
               ", Managers: " + organizationManagersList.size() + ", Projects: " + organizationProjectsList.size() + ", Employees: " + organizationEmployeesList.size();
    }
    // Retrieves all manager objects
    public ArrayList<Manager> getAllManagers(ManagerDatabase managerDb) {
        ArrayList<Manager> managers = new ArrayList<>();
        for (String id : organizationManagersList) {
            Manager m = managerDb.getById(id);
            if (m != null) managers.add(m);
        }
        return managers;
    }
    // Retrieves all project objects
    public ArrayList<Project> getAllProjects(ProjectDatabase projectDb) {
        ArrayList<Project> projects = new ArrayList<>();
        for (String id : organizationProjectsList) {
            Project p = projectDb.getById(id);
            if (p != null) projects.add(p);
        }
        return projects;
    }
    // Retrieves all employee objects
    public ArrayList<Employee> getAllEmployees(EmployeeDatabase empDb) {
        ArrayList<Employee> employees = new ArrayList<>();
        for (String id : organizationEmployeesList) {
            Employee e = empDb.getById(id);
            if (e != null) employees.add(e);
        }
        return employees;
    }
    // Generates a report by querying relevant databases
    public Report generateReport(String reportType, ProjectDatabase projectDb, EmployeeDatabase empDb) {
        StringBuilder reportContent = new StringBuilder();
        reportContent.append("--- ").append(reportType).append(" Report ---\n");
        reportContent.append("Generated by Executive: ").append(getName()).append(" (ID: ").append(getID()).append(")\n");
        reportContent.append("Date: ").append(new java.util.Date()).append("\n\n");
        if ("PROJECT_PROGRESS".equals(reportType)) {
            reportContent.append("PROJECT PROGRESS OVERVIEW:\n");
            ArrayList<Project> projects = getAllProjects(projectDb);
            if (projects.isEmpty()) {
                reportContent.append("No projects available.\n");
            } else {
                for (Project project : projects) {
                    reportContent.append("- Project: ").append(project.getName())
                                 .append(" (ID: ").append(project.getID())
                                 .append(") Status: ").append(project.getStatus()).append("\n");
                }
            }
        } else if ("EMPLOYEE_WORKLOAD".equals(reportType)) {
            reportContent.append("EMPLOYEE WORKLOAD OVERVIEW:\n");
            ArrayList<Employee> employees = getAllEmployees(empDb);
            if (employees.isEmpty()) {
                reportContent.append("No employees available.\n");
            } else {
                for (Employee employee : employees) {
                    reportContent.append("- Employee: ").append(employee.getName())
                                 .append(" (ID: ").append(employee.getID()).append(")\n");
                }
            }
        } else {
            reportContent.append("Unknown report type: ").append(reportType).append("\n");
        }
        return new Report("Report_" + System.currentTimeMillis(), new java.util.Date(), reportContent.toString(), this.getID());
    }
    // Provides a high-level summary of organizational metrics
    public void viewSystemOverview(ProjectDatabase projectDb, EmployeeDatabase empDb, ManagerDatabase managerDb) {
        System.out.println("\n--- Organization System Overview ---");
        System.out.println("Total Employees: " + getAllEmployees(empDb).size());
        System.out.println("Total Managers: " + getAllManagers(managerDb).size());
        System.out.println("Total Projects: " + getAllProjects(projectDb).size());
        long completedProjects = getAllProjects(projectDb).stream().filter(p -> "COMPLETED".equals(p.getStatus())).count();
        System.out.println("Projects Completed: " + completedProjects);
        System.out.println("----------------------------------");
    }
    // Allows the executive to delete any user account
    public void deleteAccount(String userId, PersonDatabase personDb) {
        personDb.delete(userId);
        organizationManagersList.remove(userId);
        organizationEmployeesList.remove(userId);
        // Optionally remove from projects if needed
    }
    // Allows the executive to add a new project
    public void addProjectToOrganization(Project newProject, ProjectDatabase projectDb) {
        if (newProject != null && !organizationProjectsList.contains(newProject.getID())) {
            organizationProjectsList.add(newProject.getID());
            projectDb.add(newProject);
        }
    }
    // Allows the executive to remove a project
    public void removeProjectFromOrganization(String projectId, ProjectDatabase projectDb) {
        organizationProjectsList.remove(projectId);
        projectDb.delete(projectId);
    }
}